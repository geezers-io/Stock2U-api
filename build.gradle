buildscript {
    ext {
        queryDslVersion = '5.0.0'
    }
}


plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.16'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'checkstyle'
    id 'org.ec4j.editorconfig' version '0.0.3'
    id("com.google.osdetector") version "1.7.1"
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'com.hack'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.30'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.30'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.33'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation "org.springdoc:springdoc-openapi-ui:1.6.12"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation group: 'com.twilio.sdk', name: 'twilio', version: '9.13.1'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.566'
    implementation group: 'org.apache.tika', name: 'tika-core', version: '2.9.0'
    implementation ('com.github.javafaker:javafaker:1.0.2') { exclude module: 'org.yaml' }
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.26'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    implementation "com.querydsl:querydsl-core:${queryDslVersion}"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"


    if (osdetector.classifier == "osx-aarch_64") { // MacOS 일 때 이슈 해결용 의존성 추가
        runtimeOnly("io.netty:netty-resolver-dns-native-macos:4.1.77.Final:${osdetector.classifier}")
    }
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated", querydslDir]
        }
    }
}

compileQuerydsl.doFirst {
    if (file(querydslDir).exists() )
    delete(file(querydslDir))
}


tasks.named('test') {
    file(".env").eachLine {
        String[] tokens = it.split("=")
        if (tokens.length > 1) {
            String key = tokens[0]
            String value = tokens[1]
            environment(key, value)
        }
    }
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.12.3'
    maxWarnings 0
    ignoreFailures false
}

checkstyleMain {
    source = 'src/main/java'
}

clean {
    delete file('src/main/generated')
}

checkstyleTest {
    source = 'src/main/test'
}

tasks.withType(Checkstyle).configureEach {
    reports {
    }
}
